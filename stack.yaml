AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "My API Gateway and Lambda function"

Resources:
  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "*"
                Effect: "Allow"
                Resource:
                  - "*"
          PolicyName: "lambdaCan"    

  producerEC2Queue:
    Type: "AWS::SQS::Queue"
    Properties:
      DelaySeconds: 0
      QueueName: "producerEC2Queue"

  producerS3Queue:
    Type: "AWS::SQS::Queue"
    Properties:
      DelaySeconds: 0
      QueueName: "producerS3Queue"

  producerFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: "Producer Function"
      FunctionName: "producerFunction"
      Handler: "producer.handler"
      MemorySize: 128
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python3.7"
      Timeout: 10
      CodeUri: ./functions
      Environment:
        Variables:
          EC2_QUEUE_NAME: !GetAtt "producerEC2Queue.QueueName"
          S3_QUEUE_NAME: !GetAtt "producerS3Queue.QueueName"
          ACCOUNT_ID: !Ref "AWS::AccountId"

  consumerEC2Function:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: "Consumer EC2 Function"
      FunctionName: "consumerEC2Function"
      Handler: "consumerEC2.handler"
      MemorySize: 128
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python3.7"
      Timeout: 10
      CodeUri: ./functions
      Environment:
        Variables:
          SNS_TOPIC: "arn:aws:sns:us-east-1:820315430153:TestTopic"

  consumerS3Function:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: "Consumer S3 Function"
      FunctionName: "consumerS3Function"
      Handler: "consumerS3.handler"
      MemorySize: 128
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python3.7"
      Timeout: 10
      CodeUri: ./functions
      Environment:
        Variables:
          SNS_TOPIC: "arn:aws:sns:us-east-1:820315430153:TestTopic"

  fiveMinuteTimer:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Triggers every five minutes"
      ScheduleExpression: "rate(60 minutes)"
      Targets: 
        - Arn: !GetAtt "producerFunction.Arn"
          Id: "something_i_dunno"
  
  consumerEC2Trigger:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt "producerEC2Queue.Arn"
      FunctionName: !GetAtt "consumerEC2Function.Arn"
    DependsOn: 
      - "producerEC2Queue"
      - "consumerEC2Function"

  consumerS3Trigger:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt "producerS3Queue.Arn"
      FunctionName: !GetAtt "consumerS3Function.Arn"
    DependsOn:
      - "producerS3Queue"
      - "consumerS3Function"

  PermissionForEventsToInvokeLambda: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName: !Ref "producerFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt "fiveMinuteTimer.Arn"
